// a board with 2 x 2: row = [1, 2], column = [1, 2]

//[1,3,2,4,3,3]
//[[1,2,3], [2,3,4], [5, 5, 7]]












//create the board

//assuming a 3 X 3 board...

[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 1, 0, 1, 0],[0, 0, 0, 0, 0]];
           3                3                3                3               3

[
    [0, 0, 0, 0, 0],
           2

    [0, 0, 0, 0, 0],
           2

    [0, 0, 0, 0, 0],
           2

    [0, 1, 0, 1, 0],
           2

    [0, 0, 0, 0, 0],
           2
                     ]



//go through the board...
1. O-ICE
output: return the number of nxn chessboards that exist, with n rooks placed such that none of them can attack each other
input: n, number of pieces to go on the board and its dimensions.
constraints: ?
edge cases: n < 3




while(count < n){
  var count = 0;
  //for(var i = 0; i < board.length; i++){
      for(var j = 0; j < board.length; j++){
      //if (the spot is not occupied already
      && no row conflicts; sum === 0;
      && no column conflicts; sum === 0)
      toggle(board[i][j]);
      count++;
  }
}


//get all combinations of n rooks
//




//loop through each table and test our methods





var rockPaperScissors = function (rounds) {
  // TODO: your solution here

  var plays = ['rock', 'paper', 'scissors'];
  var rounds = rounds || 3;
  var combos = [];

  var generateCombos = function (roundsToGo, playedSoFar) {
    playedSoFar = playedSoFar || [];

    if (roundsToGo === 0) {
      combos.push(playedSoFar);
      return;
    }

    for (var i = 0; i < plays.length; i++) {
      var currentPlay = plays[i];
      generateCombos(roundsToGo - 1, playedSoFar.concat(currentPlay));
    }

  };

  generateCombos(rounds);
  return combos;
  };


var rockPaperScissors = function (n) {
  // TODO: your solution here

  // var plays = ['rock', 'paper', 'scissors'];
  var rounds = rounds || 3;
  var combos = [];

  var generateCombos = function (roundsToGo, playedSoFar) {
    playedSoFar = playedSoFar || [];

    if (roundsToGo === 0) {
      combos.push(playedSoFar);
      return;
    }

    for (var i = 0; i < plays.length; i++) {
      var currentPlay = plays[i];
      generateCombos(roundsToGo - 1, playedSoFar.concat(currentPlay));
    }

  };

  generateCombos(rounds);
  return combos;
  };









hasMajorDiagonalConflictAt: function(majorDiagonalColumnIndexAtFirstRow) {
  var total;
  var rows = this.rows();

  var subroutine = function(rowIndex, columnIndex) {
    // debugger;
    //get rid of in bounds
    if (rowIndex === rows.length || columnIndex === rows.length) {
      return;
    } else {
      if (rows[rowIndex][columnIndex] === 1) {
        total++;
      }
     subroutine(++rowIndex, ++columnIndex);
    }
  };

  for (var i = 0; i < rows.length; i++) {
    total = 0;
    subroutine(i, majorDiagonalColumnIndexAtFirstRow);
    if (total >= 2) {
      return true;
    }
  }
  return false; // fixme
},
































var string = 'AAABBBCDDEEF'

var nonRepeatingStrings = function(string){


  var obj = {};

  for(var char of string){
    obj[char] ? obj[char] ++ : obj[char] = 1;
  }

  for(var char of string){
    if(obj[prop] === 1){
      return obj[prop];
    }
  }

}









































